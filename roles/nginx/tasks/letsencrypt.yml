---
- block:
    - name: install certbot
      package:
        name:
          - certbot
          - python3-certbot-nginx
        state: present

    - name: define letsencrypt binary path
      set_fact:
        letsencrypt_path: /usr/bin/letsencrypt
        letsencrypt_method: webroot

  rescue:
    - name: Install git
      package:
        name: git
        state: present

    - name: git clone letsencrypt/letsencrypt
      git:
        repo: https://github.com/letsencrypt/letsencrypt
        dest: /opt/letsencrypt/

    - name: Install EPEL repository (CentOS/RHEL 6 only)
      yum:
        name: http://download.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm
        state: present
      when: (ansible_os_family == "RedHat" and ansible_distribution_major_version == "6")

    - name: Enable RHEL Server Optional RPMs
      command: "subscription-manager repos --enable rhel-{{ ansible_distribution_major_version }}-server-optional-rpms"
      when: ansible_distribution == "RedHat"

    - name: Install letsencrypt dependencies (takes a while)
      command: /opt/letsencrypt/letsencrypt-auto

    - name: define letsencrypt binary path
      set_fact:
        letsencrypt_path: /opt/letsencrypt/letsencrypt-auto
        letsencrypt_method: standalone

- name: Create /etc/letsencrypt directories
  file:
    path: "{{ item.path }}"
    state: directory
    mode: '0755'
  when: item.condition | default(True)
  with_items:
    - path: /etc/letsencrypt
    - path: /opt/mattermost_special/letsencrypt
      condition: "{{ (letsencrypt_method == 'webroot') }}"

- name: Create letsencrypt config file /etc/letsencrypt/cli.ini
  template:
    src: cli.ini.j2
    dest: /etc/letsencrypt/cli.ini

- name: Let https through firewall (RHEL 7)
  firewalld:
    service: https
    permanent: true
    state: enabled
    immediate: true
  when: (ansible_distribution == "RedHat" and ansible_distribution_major_version == "7")

- name: Let http through firewall (RHEL 7)
  firewalld:
    service: http
    permanent: true
    state: enabled
    immediate: true
  when: (ansible_distribution == "RedHat" and ansible_distribution_major_version == "7")

- name: Stop and disable iptables (RHEL 6)
  service:
    name: iptables
    state: stopped
    enabled: no
  when: (ansible_distribution == "RedHat" and ansible_distribution_major_version == "6")

- name: Pause play until a URL is reachable from this host
  uri:
    url: "http://{{ cert_domain | default(ansible_fqdn) }}"
    status_code: [200, 301]
    follow_redirects: none
    method: GET
  register: _result
  until: _result is success
  retries: 30
  delay: 3
  when: inventory_hostname == groups['all'][0]

- name: Get SSL certificate from letsencrypt
  command: "{{ letsencrypt_path }} certonly -c /etc/letsencrypt/cli.ini --agree-tos"
  args:
    creates: /etc/letsencrypt/live/{{ cert_domain | default(ansible_fqdn) }}/fullchain.pem
  when: inventory_hostname == groups['all'][0]

- name: Create cron job to automatically update SSL cert (non-systemd)
  cron:
    name: "Renew letsencrypt SSL certs"
    minute: "47"
    hour: "23"
    month: "*"
    day: "15"
    job: "service nginx stop && {{ letsencrypt_path }} renew --quiet --no-self-upgrade && service nginx start"
  when: (ansible_os_family == "RedHat" and ansible_distribution_major_version is version("6", "=")) or (ansible_distribution == "Ubuntu" and ansible_distribution_major_version is version("14", "="))

- name: Create cron job to automatically update SSL cert (systemd)
  cron:
    name: "Renew letsencrypt SSL certs"
    minute: "47"
    hour: "23"
    month: "*"
    day: "15"
    job: "{{ letsencrypt_path }} renew --quiet --no-self-upgrade && systemctl reload nginx"
  when: (ansible_os_family == "RedHat" and ansible_distribution_major_version is version("7", ">=")) or (ansible_distribution == "Ubuntu" and ansible_distribution_major_version is version("16", ">=")) or (ansible_distribution == "Debian" and ansible_distribution_major_version is version("8", ">="))
