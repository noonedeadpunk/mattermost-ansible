---
- name: Download binary from MatterMost website
  get_url:
    url: "{{ mattermost_package_url }}"
    dest: /tmp/
  when: (ansible_os_family == "RedHat" and ansible_distribution_major_version is version("7", ">=")) or (ansible_distribution == "Ubuntu" and ansible_distribution_major_version is version("16", ">=")) or (ansible_distribution == "Debian" and ansible_distribution_major_version is version("8", ">="))
  tags:
    - mattermost-upgrade

- name: Download binary from MatterMost website (using wget because get_url fails if system python is older than 2.7.5)
  command: "wget {{ mattermost_package_url }}"
  args:
    chdir: /tmp/
    creates: "/tmp/{{ mattermost_package_url | basename }}"
  when: (ansible_os_family == "RedHat" and ansible_distribution_major_version is version("6", "=")) or (ansible_distribution == "Ubuntu" and ansible_distribution_major_version is version("14", "="))
  tags:
    - mattermost-upgrade

- name: Create mattermost user
  user:
    name: "{{ mattermost_user }}"
    system: yes
    createhome: no

- name: Create mattermost directory
  file:
    path: /opt/mattermost-{{ mattermost_version }}
    owner: "{{ mattermost_user }}"
    group: "{{ mattermost_user }}"
    state: directory
  tags:
    - mattermost-upgrade

- include_tasks: mattermost_mount.yml
  when: mattermost_mount_src | length > 0

- name: Create special directories
  file:
    path: "/opt/mattermost_special/{{ item }}"
    owner: "{{ mattermost_user }}"
    group: "{{ mattermost_user }}"
    state: directory
  with_items: "{{ mattermost_special }}"
  tags:
    - mattermost-upgrade

- name: unpack mattermost archive
  unarchive:
    src: /tmp/{{ mattermost_package_url | basename }}
    dest: /opt/mattermost-{{ mattermost_version }}/
    copy: no
    owner: "{{ mattermost_user }}"
    group: "{{ mattermost_user }}"
  args:
    creates: /opt/mattermost-{{ mattermost_version }}/mattermost/bin/platform
  tags:
    - mattermost-upgrade

- name: copy init config file
  copy:
    src: /opt/mattermost-{{ mattermost_version }}/mattermost/config/config.json
    dest: /opt/mattermost_special/config/config.json
    remote_src: true
    owner: "{{ mattermost_user }}"
    group: "{{ mattermost_user }}"
    force: no

- name: Check for current status
  stat:
    path: /opt/mattermost-{{ mattermost_version }}/mattermost/{{ item }}
  register: _mattermost_stat
  with_items: "{{ mattermost_special }}"
  tags:
    - mattermost-upgrade

- name: Remove special directories from mattermost
  file:
    path: /opt/mattermost-{{ mattermost_version }}/mattermost/{{ item.item }}
    state: absent
  when:
    - item.stat.exists
    - not item.stat.islnk
  with_items: "{{ _mattermost_stat.results }}"
  tags:
    - mattermost-upgrade

- name: Symlink special directories to mattermost
  file:
    src: "/opt/mattermost_special/{{ item }}"
    dest: "/opt/mattermost-{{ mattermost_version }}/mattermost/{{ item }}"
    state: link
  with_items: "{{ mattermost_special }}"
  notify: restart mattermost
  tags:
    - mattermost-upgrade

- name: Symlink mattermost
  file:
    src: "/opt/mattermost-{{ mattermost_version }}/mattermost"
    dest: "/opt/mattermost"
    state: link
  notify: restart mattermost
  tags:
    - mattermost-upgrade

- include_tasks: db_setup.yml
  when:
    - inventory_hostname == (groups['galera_all'] | intersect(ansible_play_hosts))[0]
    - not mattermost_postgres | bool
  vars:
    _oslodb_setup_host: "{{ (groups['galera_all'] | intersect(ansible_play_hosts))[0] }}"
    _oslodb_ansible_python_interpreter: "{{ ansible_python['executable'] }}"
    _oslodb_databases:
      - name: "{{ db_name }}"
        users:
          - username: "{{ db_user }}"
            password: "{{ db_password }}"
            host: "{{ db_host | regex_replace('^((?:[0-9]{1,3}\\.){3})[0-9]{1,3}$', '\\1%') }}"

- name: Edit /opt/mattermost_special/config/config.json
  lineinfile:
    dest: /opt/mattermost_special/config/config.json
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
    backrefs: yes
  when: item.condition | default(true) | bool
  with_items:
    - regexp: '"DriverName": "(mysql|postgres)"'
      line: '      "DriverName": "{{ db_driver }}",'
    - regexp: '"DataSource":'
      line: '        "DataSource": "{{ (db_driver == "postgres") | ternary(db_driver ~ "://", "") }}{{ db_user }}:{{ db_password }}@{{ db_connection }}/{{ db_name }}?{{ (db_driver == "postgres") | ternary(db_postgres_options, db_mysql_options) }}",'
  notify: restart mattermost

- name: Create mattermost SystemV init script (Ubuntu 14.04)
  template:
    src: init_script_ubuntu.j2
    dest: /etc/init.d/mattermost
    owner: root
    group: root
    mode: 0755
  when: (ansible_distribution == "Ubuntu" and ansible_distribution_major_version is version("14", "="))
  notify: restart mattermost

- name: Create mattermost upstart init script (RHEL/CentOS 6)
  template:
    src: mattermost.conf.j2
    dest: /etc/init/mattermost.conf
    owner: root
    group: root
    mode: 0644
  when: (ansible_os_family == "RedHat" and ansible_distribution_major_version is version("6", "="))
  notify: restart mattermost

- name: Create mattermost systemd service (Ubuntu 16.04, RHEL/CentOS 7)
  template:
    src: mattermost.service.j2
    dest: /etc/systemd/system/mattermost.service
    owner: root
    group: root
    mode: 0664
  when: (ansible_os_family == "RedHat" and ansible_distribution_major_version is version("7", ">=")) or (ansible_distribution == "Ubuntu" and ansible_distribution_major_version is version("16", ">=")) or (ansible_distribution == "Debian" and ansible_distribution_major_version is version("8", ">="))
  notify: restart mattermost

- meta: flush_handlers
